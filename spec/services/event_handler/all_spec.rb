# frozen_string_literal: true

require "rails_helper"

RSpec.describe EventHandler::All do
  subject(:handler) { described_class.new(event) }

  let(:requester_id) { 37606453 }
  let(:chat_name) { "–ú–∏—Ä–Ω—ã–µ –ö–∞–±–∞–Ω—á–∏–∫–∏" }
  let(:apostol_vk_id) { 87654321 }
  let(:warden_vk_id) { described_class::WARDEN_ACCOUNT_ID }
  let(:chat_id) { 2000000102 }
  let(:expected_event_type) { EventType::MESSAGE_NEW }
  let(:unexpected_event_type) { EventType::MESSAGE_EDITING }
  let(:event_type) { expected_event_type }
  let(:message_id) { 3442844 }
  let(:flags) { 532481 }
  let(:timestamp) { 1731752495 }
  let(:meta) do
    { "emoji" => "1", "client_platform_info" => "mAHNE9kCzgBiIIkDAATC", "from" => from_vk_id }
  end
  let(:message_text) { "‚ú®[id#{requester_id}|–ê–ª–µ–∫—Å–∞–Ω–¥—Ä], –Ω–∞ –í–∞—Å –Ω–∞–ª–æ–∂–µ–Ω–æ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ –∞—Ç–∞–∫–∏! –ê—Ç–∞–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∞ –Ω–∞ 30% –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–≤—É—Ö —á–∞—Å–æ–≤. üçÄ(24%) –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –±–∞—Ñ!<br>üó£–ì–æ–ª–æ—Å —É –ê–ø–æ—Å—Ç–æ–ª–∞: 17" }
  let(:from_vk_id) { warden_vk_id }
  let(:event) do
    [event_type, message_id, flags, chat_id, timestamp, chat_name, message_text, meta]
  end


  RSpec.shared_examples "returns nil" do
    it "returns nil" do
      expect(handler.call).to be_nil
    end
  end

  describe "#call" do
    context "when event is not trackable" do
      context "when unexpected event_type" do
        let(:event_type) { unexpected_event_type }

        it_behaves_like 'returns nil'
      end

      context "when message_text doesnt present" do
        let(:message_text) { nil }

        it_behaves_like 'returns nil'
      end

      context "when chat is not trackable" do
        let(:chat_name) { "No matter name" }

        it_behaves_like 'returns nil'
      end
    end

    context "when event is a buff request" do
      let(:from_vk_id) { requester_id }
      let(:message_text) { "/—á–∞–∑—É" }
      let(:buff_request_handler) { instance_double(EventHandler::BuffRequest) }

      before do
        allow(EventHandler::BuffRequest).to receive(:new)
                                              .with(message_text, message_id, from_vk_id, chat_id)
                                              .and_return(buff_request_handler)
        allow(buff_request_handler).to receive(:call)
      end

      it "calls EventHandler::BuffRequest" do
        handler.call
        expect(buff_request_handler).to have_received(:call)
      end
    end

    context "when event is a buff result" do
      let(:successful_message_text) { "‚ú®[id#{requester_id}|–ê–ª–µ–∫—Å–∞–Ω–¥—Ä], –Ω–∞ –í–∞—Å –Ω–∞–ª–æ–∂–µ–Ω–æ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ –∞—Ç–∞–∫–∏! –ê—Ç–∞–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∞ –Ω–∞ 30% –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–≤—É—Ö —á–∞—Å–æ–≤. üçÄ(24%) –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –±–∞—Ñ!<br>üó£–ì–æ–ª–æ—Å —É –ê–ø–æ—Å—Ç–æ–ª–∞: 17" }
      let(:voices_exhausted_message_text) { "üö´[id#{apostol_vk_id}|–ì—Ä–∏–≥–æ—Ä–∏–π], –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ì–æ–ª–æ—Å –î—Ä–µ–≤–Ω–∏—Ö, –ø–æ–ª—É—á–∞–µ–º—ã–π –ø—Ä–∏ –∫–∞–∂–¥–æ–π –ø–æ–±–µ–¥–µ –Ω–∞–¥ —Å–æ–∑–¥–∞–Ω–∏—è–º–∏ —Ç—å–º—ã!" }
      let(:same_buff_in_effect_message_text) { "‚ú®[id#{requester_id}|–ê–ª–µ–∫—Å–∞–Ω–¥—Ä], –Ω–∞ —ç—Ç—É —Ü–µ–ª—å —É–∂–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–∞–∫–æ–µ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ!" }
      let(:ability_cooldown_message_text) { "‚ú®[id#{requester_id}|–ê–ª–µ–∫—Å–∞–Ω–¥—Ä], —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –º–æ–∂–Ω–æ –Ω–∞–∫–ª–∞–¥—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ!" }
      let(:race_buff_in_effect_message_text) { "‚ú®[id#{requester_id}|–ê–ª–µ–∫—Å–∞–Ω–¥—Ä], –Ω–∞ —Ü–µ–ª—å —É–∂–µ –Ω–∞–ª–æ–∂–µ–Ω–æ –¥—Ä—É–≥–æ–µ —Ä–∞—Å–æ–≤–æ–µ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ! –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: 47 —Å–µ–∫." }
      let(:invalid_race_message_text) { "‚ú®[id#{requester_id}|–ê–ª–µ–∫—Å–∞–Ω–¥—Ä], –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–ø–æ—Å—Ç–æ–ª–æ–º —ç—Ç–æ–π —Ä–∞—Å—ã!" }

      let(:buff_result_handler) { instance_double(EventHandler::BuffResult::All) }

      RSpec.shared_examples "handles buff result" do
        before do
          allow(EventHandler::BuffResult::All).to receive(:new)
                                               .with(message_text, result_type, chat_id)
                                               .and_return(buff_result_handler)
          allow(buff_result_handler).to receive(:call)
        end

        it "calls EventHandler::BuffResult::All with result_type" do
          handler.call
          expect(buff_result_handler).to have_received(:call)
        end
      end

      context "when result type - successful" do
        let(:result_type) { :successful }
        let(:message_text) { successful_message_text }

        it_behaves_like "handles buff result"
      end

      context "when result type - voices_exhausted" do
        let(:result_type) { :voices_exhausted }
        let(:message_text) { voices_exhausted_message_text }

        it_behaves_like "handles buff result"
      end

      context "when result type - same_buff_in_effect" do
        let(:result_type) { :same_buff_in_effect }
        let(:message_text) { same_buff_in_effect_message_text }

        it_behaves_like "handles buff result"
      end

      context "when result type - ability_cooldown" do
        let(:result_type) { :ability_cooldown }
        let(:message_text) { ability_cooldown_message_text }

        it_behaves_like "handles buff result"
      end

      context "when result type - race_buff_in_effect" do
        let(:result_type) { :race_buff_in_effect }
        let(:message_text) { race_buff_in_effect_message_text }

        it_behaves_like "handles buff result"
      end

      context "when result type - invalid_race" do
        let(:result_type) { :invalid_race }
        let(:message_text) { invalid_race_message_text }

        it_behaves_like "handles buff result"
      end

      context "when result message not from warden" do
        let(:from_vk_id) { 23112341 }

        before { handler.call }

        it_behaves_like "returns nil"
      end
    end

    context "when event is a profile info" do
      let(:message_text) { "[id#{requester_id}|–ê–ª–µ–∫—Å–∞–Ω–¥—Ä], –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:<br>üë§–ö–ª–∞—Å—Å: –∞–ø–æ—Å—Ç–æ–ª (9), –≥–æ–±–ª–∏–Ω-—ç–ª—å—Ñ<br>üë•–ì–∏–ª—å–¥–∏—è: –ú–∏—Ä–Ω—ã–µ –∫–∞–±–∞–Ω—á–∏–∫–∏<br>üòá–û—á–µ–Ω—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∫–∞—Ä–º–∞<br>üíÄ–£—Ä–æ–≤–µ–Ω—å: 302<br>üéâ–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: 48<br>üåï1785304 üíé275<br>üëä551 üñê1352 ‚ù§946 üçÄ62 üó°460 üõ°304" }
      let(:profile_info_handler) { instance_double(EventHandler::ProfileInfo) }

      before do
        allow(EventHandler::ProfileInfo).to receive(:new).with(message_text, chat_id).and_return(profile_info_handler)
        allow(profile_info_handler).to receive(:call)
      end

      it "calls EventHandler::BuffResult::All" do
        handler.call
        expect(profile_info_handler).to have_received(:call)
      end
    end
  end
end
